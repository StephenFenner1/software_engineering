/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package softwareengineering;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.ArrayList;
import java.util.Map;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Group 26
 */
public class Setup extends javax.swing.JFrame {

    File compFile = null;
    File clientFile = null;
    int traderCount = 0;

    /**
     * Creates new form Setup
     */
    int choice;

    public Setup() {
        paused = true;

        Object[] temp;

        while (compFile == null || clientFile == null) {
            //No valid selected files

            temp = initialSetup();
            choice = (int) temp[0];
            traderCount = (int) temp[1];

            if (choice != 0) {
                //Chooses to exit program
                System.exit(0);
            }
            if (compFile == null || clientFile == null) {
                displayFileError();

            }

        }

        initComponents();
        speedSlider.setInverted(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        settingsFrame = new javax.swing.JFrame();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        portfStockPanel = new javax.swing.JPanel();

        mainPane = new javax.swing.JPanel();
        tradingExchangePanel = new javax.swing.JPanel();
        tradExTypeLabel = new javax.swing.JLabel();
        tradExTypeTextField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tradExTextArea = new javax.swing.JTextArea();
        clientPanel = new javax.swing.JPanel();
        clientsCBox = new javax.swing.JComboBox<>();
        clientPortfPanel = new javax.swing.JPanel();
        portfScrollPane = new javax.swing.JScrollPane();
        portfTable = new javax.swing.JTable();
        portfValuePanel = new javax.swing.JPanel();
        portfCashHLabel = new javax.swing.JLabel();
        portfInitLabel = new javax.swing.JLabel();
        portfTraderIDLabel = new javax.swing.JLabel();
        portfProfLabel = new javax.swing.JLabel();
        portfTraderMoodLabel = new javax.swing.JLabel();
        portfTraderMoodTextField = new javax.swing.JTextField();
        portfCashHTextField = new javax.swing.JTextField();
        portfInitTextField = new javax.swing.JTextField();
        portfProfitTextField = new javax.swing.JTextField();
        portfTraderIDTextField = new javax.swing.JTextField();
        portfCashedOutLabel = new javax.swing.JLabel();
        portfCashedOutTextField = new javax.swing.JTextField();
        portfTraderTypeLabel = new javax.swing.JLabel();
        portfTraderTypeTextField = new javax.swing.JTextField();
        cashOutButton = new javax.swing.JButton();
        stockPanel = new javax.swing.JPanel();
        compScrollPane = new javax.swing.JScrollPane();
        compTable = new javax.swing.JTable();
        traderPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        traderTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        clientButton = new javax.swing.JButton();
        tradingExButton = new javax.swing.JButton();
        companiesButton = new javax.swing.JButton();
        pauseButton = new javax.swing.JButton();
        traderButton = new javax.swing.JButton();
        speedSlider = new javax.swing.JSlider();
        speedLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        dateLabel = new javax.swing.JLabel();
        timeLabel = new javax.swing.JLabel();

        settingsFrame.setTitle("Settings");
        settingsFrame.setMinimumSize(new java.awt.Dimension(400, 600));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout settingsFrameLayout = new javax.swing.GroupLayout(settingsFrame.getContentPane());
        settingsFrame.getContentPane().setLayout(settingsFrameLayout);
        settingsFrameLayout.setHorizontalGroup(
            settingsFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        settingsFrameLayout.setVerticalGroup(
            settingsFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout portfStockPanelLayout = new javax.swing.GroupLayout(portfStockPanel);
        portfStockPanel.setLayout(portfStockPanelLayout);
        portfStockPanelLayout.setHorizontalGroup(
            portfStockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 739, Short.MAX_VALUE)
        );
        portfStockPanelLayout.setVerticalGroup(
            portfStockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 48, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainPane.setLayout(new java.awt.CardLayout());

        tradingExchangePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Trading Exchange"));

        tradExTypeLabel.setText("Market Type");

        tradExTypeTextField.setEditable(false);

        tradExTextArea.setEditable(false);
        tradExTextArea.setColumns(20);
        tradExTextArea.setRows(5);
        jScrollPane2.setViewportView(tradExTextArea);

        javax.swing.GroupLayout tradingExchangePanelLayout = new javax.swing.GroupLayout(tradingExchangePanel);
        tradingExchangePanel.setLayout(tradingExchangePanelLayout);
        tradingExchangePanelLayout.setHorizontalGroup(
            tradingExchangePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tradingExchangePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tradingExchangePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(tradingExchangePanelLayout.createSequentialGroup()
                        .addComponent(tradExTypeLabel)
                        .addGap(18, 18, 18)
                        .addComponent(tradExTypeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(801, Short.MAX_VALUE))))
        );
        tradingExchangePanelLayout.setVerticalGroup(
            tradingExchangePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tradingExchangePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tradingExchangePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tradExTypeLabel)
                    .addComponent(tradExTypeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 528, Short.MAX_VALUE))
        );

        mainPane.add(tradingExchangePanel, "card2");

        clientPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Client"));

        clientsCBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clientsCBoxActionPerformed(evt);
            }
        });

        clientPortfPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Portfolio"));

        portfTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Company", "Stock"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        portfScrollPane.setViewportView(portfTable);

        portfCashHLabel.setText("Cash Holdings: ");

        portfInitLabel.setText("Initial Value: ");

        portfTraderIDLabel.setText("Trader ID: ");

        portfProfLabel.setText("Money Made: ");

        portfTraderMoodLabel.setText("Trader Mood");

        portfTraderMoodTextField.setEditable(false);

        portfCashHTextField.setEditable(false);

        portfInitTextField.setEditable(false);

        portfProfitTextField.setEditable(false);

        portfTraderIDTextField.setEditable(false);

        portfCashedOutLabel.setText("Cashing Out:");

        portfCashedOutTextField.setEditable(false);

        portfTraderTypeLabel.setText("Trader Type");

        portfTraderMoodTextField.setEditable(false);
        portfTraderTypeTextField.setEditable(false);

        javax.swing.GroupLayout portfValuePanelLayout = new javax.swing.GroupLayout(portfValuePanel);
        portfValuePanel.setLayout(portfValuePanelLayout);
        portfValuePanelLayout.setHorizontalGroup(
            portfValuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(portfValuePanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(portfValuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(portfValuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(portfInitLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(portfCashHLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(portfCashedOutLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(portfProfLabel)
                    .addComponent(portfTraderIDLabel)
                    .addComponent(portfTraderMoodLabel)
                    .addComponent(portfTraderTypeLabel))
                .addGap(18, 18, 18)
                .addGroup(portfValuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(portfTraderTypeTextField)
                    .addGroup(portfValuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(portfCashHTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                        .addComponent(portfInitTextField)
                        .addComponent(portfProfitTextField)
                        .addComponent(portfTraderIDTextField)
                        .addComponent(portfTraderMoodTextField))
                    .addComponent(portfCashedOutTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(297, Short.MAX_VALUE))
        );
        portfValuePanelLayout.setVerticalGroup(
            portfValuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(portfValuePanelLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(portfValuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(portfCashHLabel)
                    .addComponent(portfCashHTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(portfValuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(portfInitLabel)
                    .addComponent(portfInitTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(portfValuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(portfCashedOutLabel)
                    .addComponent(portfCashedOutTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(portfValuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(portfProfLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(portfProfitTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52)
                .addGroup(portfValuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(portfTraderIDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(portfTraderIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(portfValuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(portfTraderMoodLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(portfTraderMoodTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(portfValuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(portfTraderTypeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(portfTraderTypeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout clientPortfPanelLayout = new javax.swing.GroupLayout(clientPortfPanel);
        clientPortfPanel.setLayout(clientPortfPanelLayout);
        clientPortfPanelLayout.setHorizontalGroup(
            clientPortfPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, clientPortfPanelLayout.createSequentialGroup()
                .addComponent(portfValuePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(portfScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        clientPortfPanelLayout.setVerticalGroup(
            clientPortfPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(portfScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE)
            .addComponent(portfValuePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        cashOutButton.setText("Cash Out");
        cashOutButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                cashOutButtonMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout clientPanelLayout = new javax.swing.GroupLayout(clientPanel);
        clientPanel.setLayout(clientPanelLayout);
        clientPanelLayout.setHorizontalGroup(
            clientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clientPanelLayout.createSequentialGroup()
                .addComponent(clientsCBox, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cashOutButton)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(clientPortfPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        clientPanelLayout.setVerticalGroup(
            clientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clientPanelLayout.createSequentialGroup()
                .addGroup(clientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clientsCBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cashOutButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clientPortfPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mainPane.add(clientPanel, "card2");

        stockPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Company"));

        compTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Company Name", "Stock Type", "Stock Price (pence)", "Is Bankrupt"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        DefaultTableCellRenderer centreRenderer = new DefaultTableCellRenderer();
        centreRenderer.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);
        compTable.getColumn("Company Name").setCellRenderer( centreRenderer );
        compTable.getColumn("Stock Type").setCellRenderer( centreRenderer );
        compTable.getColumn("Stock Price (pence)").setCellRenderer( centreRenderer );
        compTable.getColumn("Is Bankrupt").setCellRenderer( centreRenderer );
        compScrollPane.setViewportView(compTable);

        javax.swing.GroupLayout stockPanelLayout = new javax.swing.GroupLayout(stockPanel);
        stockPanel.setLayout(stockPanelLayout);
        stockPanelLayout.setHorizontalGroup(
            stockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(compScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1027, Short.MAX_VALUE)
        );
        stockPanelLayout.setVerticalGroup(
            stockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(compScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 570, Short.MAX_VALUE)
        );

        mainPane.add(stockPanel, "card2");

        traderPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Traders"));

        traderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Trader ID", "Client Worth Gained", "Average Worth Gained"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(traderTable);

        jLabel3.setText("Trader ID 0 -> Intelligent Trader");

        jLabel4.setText("Trader ID 1-N -> Random Traders");

        javax.swing.GroupLayout traderPanelLayout = new javax.swing.GroupLayout(traderPanel);
        traderPanel.setLayout(traderPanelLayout);
        traderPanelLayout.setHorizontalGroup(
            traderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(traderPanelLayout.createSequentialGroup()
                .addGroup(traderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(traderPanelLayout.createSequentialGroup()
                        .addGap(227, 227, 227)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(traderPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3))
                    .addGroup(traderPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel4)))
                .addContainerGap(238, Short.MAX_VALUE))
        );
        traderPanelLayout.setVerticalGroup(
            traderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(traderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(215, Short.MAX_VALUE))
        );

        mainPane.add(traderPanel, "card2");

        clientButton.setText("Client");
        clientButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clientButtonMouseClicked(evt);
            }
        });
        clientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clientButtonActionPerformed(evt);
            }
        });

        tradingExButton.setText("Trading Exc.");
        tradingExButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tradingExButtonMouseClicked(evt);
            }
        });

        companiesButton.setText("Companies");
        companiesButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                companiesButtonMouseClicked(evt);
            }
        });
        companiesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                companiesButtonActionPerformed(evt);
            }
        });

        pauseButton.setText("Run");
        pauseButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pauseButtonMouseClicked(evt);
            }
        });
        pauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseButtonActionPerformed(evt);
            }
        });

        traderButton.setText("Trader");
        traderButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                traderButtonMouseClicked(evt);
            }
        });

        speedSlider.setMajorTickSpacing(50);
        speedSlider.setMinorTickSpacing(25);
        speedSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                speedSliderStateChanged(evt);
            }
        });

        speedLabel.setText("Speed:");

        jLabel1.setText("Fast");

        jLabel2.setText("Slow");

        dateLabel.setText("jLabel3");

        timeLabel.setText("jLabel4");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mainPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tradingExButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clientButton)
                        .addGap(10, 10, 10)
                        .addComponent(companiesButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(traderButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(dateLabel)
                        .addGap(18, 18, 18)
                        .addComponent(timeLabel)
                        .addGap(96, 96, 96)
                        .addComponent(speedLabel)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(speedSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addGap(27, 27, 27)
                        .addComponent(pauseButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(speedSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(dateLabel)
                        .addComponent(timeLabel))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(clientButton)
                        .addComponent(tradingExButton)
                        .addComponent(companiesButton)
                        .addComponent(pauseButton)
                        .addComponent(traderButton)
                        .addComponent(speedLabel)
                        .addComponent(jLabel2)
                        .addComponent(jLabel1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    /**
     * Handles client button clicks. Displays client panel
     * @param evt mouse click
     */
    private void clientButtonMouseClicked(java.awt.event.MouseEvent evt) {                                          
        clientPanel.setVisible(true);
        tradingExchangePanel.setVisible(false);
        stockPanel.setVisible(false);
        traderPanel.setVisible(false);


    }                                         

    /**
     * Handles trad ex button clicked. Displays trad ex panel
     * @param evt  mouse click
     */
    private void tradingExButtonMouseClicked(java.awt.event.MouseEvent evt) {                                             
        clientPanel.setVisible(false);
        tradingExchangePanel.setVisible(true);
        stockPanel.setVisible(false);
        traderPanel.setVisible(false);
        tradExTypeTextField.setText(tradEx.getMarketType().toString());
    }                                            

    /**
     * Handles company button clicked. Displays company panel
     * @param evt mouse click
     */
    private void companiesButtonMouseClicked(java.awt.event.MouseEvent evt) {                                             
        clientPanel.setVisible(false);
        tradingExchangePanel.setVisible(false);
        stockPanel.setVisible(true);
        traderPanel.setVisible(false);

        DefaultTableModel model = (DefaultTableModel) compTable.getModel();
        model.getDataVector().removeAllElements();

        companies.stream().forEach((c) -> {
            String isBankrupt = String.valueOf(c.isBankrupt());
            model.addRow(new Object[]{c.getCompanyName(), c.getStockType(), c.getStockValue(), isBankrupt});
        });


    }                                            

    private void clientButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
    }                                            

    private void companiesButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                
        // TODO add your handling code here:
    }                                               

    private void clientsCBoxActionPerformed(java.awt.event.ActionEvent evt) {                                            

    }                                           

    /**
     * Handles cash out button clicked. Sets the selected client to cash out
     * @param evt mouse click
     */
    private void cashOutButtonMouseReleased(java.awt.event.MouseEvent evt) {                                            
        Object[] options = {"Yes", "No"};
        int choice = JOptionPane.showOptionDialog(null, "Are you sure you want to\ncash client out?", "Warning",
                JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE,
                null, options, options[0]);
        Portfolio selectedPort = (Portfolio) clientsCBox.getSelectedItem();
        Client selectedClient = selectedPort.getClient();

        if (choice == 0) {
            selectedClient.setCashingOut(true);

        }
    }                                           

    /**
     * Pause/Run the simulation
     * @param evt mouse click
     */
    private void pauseButtonMouseClicked(java.awt.event.MouseEvent evt) {                                         
        paused = !paused;
        if (paused) {
            pauseButton.setText("Run");

        } else {
            pauseButton.setText("Pause");
        }


    }                                        

    /**
     * Displays trader panel on mouse click
     * @param evt mouse click
     */
    private void traderButtonMouseClicked(java.awt.event.MouseEvent evt) {                                          
        clientPanel.setVisible(false);
        tradingExchangePanel.setVisible(false);
        stockPanel.setVisible(false);
        traderPanel.setVisible(true);

        DefaultTableModel model = (DefaultTableModel) traderTable.getModel();
        model.getDataVector().removeAllElements();

        traders.stream().forEach((trader) -> {
            model.addRow(new Object[]{trader.getID(), trader.getMoneyMade(), trader.getAvgMoneyMade()});
        });


    }                                         

    private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private int delay = 500;
    /**
     * Handles the speed slider being changed
     * @param evt changed slider state
     */
    private void speedSliderStateChanged(javax.swing.event.ChangeEvent evt) {                                         
        delay = speedSlider.getValue() * 10;

    }                                        
    /**
     * Handles the choose dataset button in initial setup prompt
     * @param evt mouse click
     * @return file selected by user
     */
    private File chooseDSetButtonMouseClicked(java.awt.event.MouseEvent evt) {
        File tempFile = null;
        JFileChooser fileChooser = new JFileChooser();
        if (fileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            tempFile = fileChooser.getSelectedFile();
        }
        return tempFile;
    }

    /**
     * Gets the value of the slider to be set as day delay
     * @return the value of the slider 
     */
    public int getDelay() {
        System.out.print("");
        return delay;
    }

    /**
     * @param args the command line arguments //
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Setup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Setup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Setup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Setup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Setup().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton cashOutButton;
    private javax.swing.JButton clientButton;
    private javax.swing.JPanel clientPanel;
    private javax.swing.JPanel clientPortfPanel;
    private javax.swing.JComboBox<Portfolio> clientsCBox;
    private javax.swing.JScrollPane compScrollPane;
    private javax.swing.JTable compTable;
    private javax.swing.JButton companiesButton;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel mainPane;
    private javax.swing.JButton pauseButton;
    private javax.swing.JLabel portfCashHLabel;
    private javax.swing.JTextField portfCashHTextField;
    private javax.swing.JLabel portfCashedOutLabel;
    private javax.swing.JTextField portfCashedOutTextField;
    private javax.swing.JLabel portfInitLabel;
    private javax.swing.JTextField portfInitTextField;
    private javax.swing.JLabel portfProfLabel;
    private javax.swing.JTextField portfProfitTextField;
    private javax.swing.JScrollPane portfScrollPane;
    private javax.swing.JPanel portfStockPanel;
    private javax.swing.JTable portfTable;
    private javax.swing.JLabel portfTraderIDLabel;
    private javax.swing.JTextField portfTraderIDTextField;
    private javax.swing.JLabel portfTraderMoodLabel;
    private javax.swing.JTextField portfTraderMoodTextField;
    private javax.swing.JLabel portfTraderTypeLabel;
    private javax.swing.JTextField portfTraderTypeTextField;
    private javax.swing.JPanel portfValuePanel;
    private javax.swing.JFrame settingsFrame;
    private javax.swing.JLabel speedLabel;
    private javax.swing.JSlider speedSlider;
    private javax.swing.JPanel stockPanel;
    private javax.swing.JLabel timeLabel;
    private javax.swing.JTextArea tradExTextArea;
    private javax.swing.JLabel tradExTypeLabel;
    private javax.swing.JTextField tradExTypeTextField;
    private javax.swing.JButton traderButton;
    private javax.swing.JPanel traderPanel;
    private javax.swing.JTable traderTable;
    private javax.swing.JButton tradingExButton;
    private javax.swing.JPanel tradingExchangePanel;
    // End of variables declaration                   

    private Boolean paused;

    /**
     * Creates the initial setup prompt
     * @return File chosen and window choice
     */
    private Object[] initialSetup() {

        JLabel companyFileName = new JLabel();
        JLabel clientFileName = new JLabel();
        JLabel traderCountLabel = new JLabel("Enter amount of traders.");
        companyFileName.setText("File Path");
        clientFileName.setText("File Path");
        JComboBox traderCountCBox = new JComboBox();

        for (int i = 2; i < 10; i++) {
            traderCountCBox.addItem(i);
        }
        traderCountCBox.setSelectedIndex(0);
        traderCount = (int) traderCountCBox.getSelectedItem();
        traderCountCBox.addActionListener((ActionEvent e) -> {
            JComboBox combo = (JComboBox) e.getSource();
            traderCount = (int) combo.getSelectedItem();
        });

        JButton chooseCompDSetButton = new JButton("Choose Company File");
        JButton chooseClientDSetButton = new JButton("Choose Client File");
        chooseCompDSetButton.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {

                File tempFile = chooseDSetButtonMouseClicked(evt);
                if (tempFile != null) {
                    companyFileName.setText(tempFile.getPath());

                } else {

                }
                setCompFile(tempFile);

            }
        });

        chooseClientDSetButton.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {

                File tempFile = chooseDSetButtonMouseClicked(evt);
                if (tempFile != null) {
                    clientFileName.setText(tempFile.getPath());

                } else {

                }
                setClientFile(tempFile);

            }
        });

        Object[] options = {"Go", "Cancel"};
        Object[] obs = {companyFileName, chooseCompDSetButton, clientFileName, chooseClientDSetButton, traderCountLabel, traderCountCBox};
        return new Object[]{JOptionPane.showOptionDialog(null, obs, "Initial Setup", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]), traderCount};

    }
    
    /**
     * Set the company file
     * @param file file of companies
     */
    private void setCompFile(File file) {
        compFile = file;
    }

    /**
     * Get whether the simulation should be paused.
     * @return whether the simulation should be paused
     */
    public Boolean isPaused() {
        System.out.print("");
        return paused;
    }

    /**
     * Set the client file
     * @param file file of clients
     */
    private void setClientFile(File file) {
        clientFile = file;
    }

    /**
     * Gets both files
     * @return client and company files as array
     */
    public File[] getFile() {

        return new File[]{compFile, clientFile};
    }

    /**
     * Get the trader count
     * @return selected amount of traders from combobox
     */
    public int getTraderCount() {

        return traderCount;
    }

    ArrayList<Trader> traders;

    /**
     * Sets the traders for the GUI to display
     * @param traders for GUI to display
     */
    public void setTraders(ArrayList<Trader> traders) {
        DefaultTableModel model = (DefaultTableModel) traderTable.getModel();
        traders.stream().forEach((trader) -> {
            model.addRow(new Object[]{trader.getID(), trader.getMoneyMade(), trader.getAvgMoneyMade()});
        });
        this.traders = traders;
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        traderTable.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        traderTable.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
        traderTable.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);

    }

    TradingExchange tradEx;

    /**
     * Set trading exchange to be used to display GUI info
     * @param tradEx 
     */
    public void setTradingExchange(TradingExchange tradEx) {
        this.tradEx = tradEx;
    }

    private ArrayList<Portfolio> portfolios;
    private ArrayList<Company> companies;

    /**
     * Sets the companies to be used to display GUI information
     * @param companies 
     */
    public void setCompanies(ArrayList<Company> companies) {
        this.companies = companies;

        DefaultTableModel model = (DefaultTableModel) compTable.getModel();
        model.getDataVector().removeAllElements();

        companies.stream().forEach((c) -> {
            String bankrupt = String.valueOf(c.isBankrupt());
            model.addRow(new Object[]{c.getCompanyName(), c.getStockType(), c.getStockValue(), bankrupt});
        });

    }

    /**
     * Displays the message in the trading exchange text area
     * @param msg the message to display
     */
    public void printMessage(String msg) {
        tradExTextArea.append(msg);
        tradExTextArea.setCaretPosition(tradExTextArea.getDocument().getLength());
    }

    /**
     * Sets the portfolios to be used in displaying information on the GUI
     * @param portfolios the portfolio list
     */
    public void setPortfolios(ArrayList<Portfolio> portfolios) {
        this.portfolios = portfolios;
        portfolios.stream().forEach((c) -> {
            clientsCBox.addItem(c);
        });

        clientsCBox.setSelectedIndex(-1);
        clientsCBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JComboBox combo = (JComboBox) e.getSource();

                DefaultTableModel model = (DefaultTableModel) portfTable.getModel();
                model.getDataVector().removeAllElements();
                Portfolio selectedPort = (Portfolio) clientsCBox.getSelectedItem();

                Map portf = selectedPort.getStockOwned();

                companies.stream().forEach((c) -> {
                    model.addRow(new Object[]{c.getCompanyName(), portf.get(c)});
                });

                Client selectedClient = selectedPort.getClient();
                portfCashHTextField.setText(Integer.toString(selectedClient.getCashHolding() / 100));
                portfInitTextField.setText(Integer.toString(selectedClient.getInitialValue() / 100));
                portfProfitTextField.setText(Integer.toString((selectedClient.getCurrentValue() - selectedClient.getInitialValue()) / 100));

                Trader selectedTrader = selectedPort.getTrader();
                portfTraderIDTextField.setText(Integer.toString(selectedTrader.getID()));
                portfTraderTypeTextField.setText(selectedTrader.getType());
                portfTraderMoodTextField.setText(selectedTrader.getMood());
                portfCashedOutTextField.setText(String.valueOf(selectedClient.isCashingOut()));
            }
        });

    }

    /**
     * Display warning error for incorrect file 
     */
    void displayFileError() {
        compFile = null;
        clientFile = null;
        JOptionPane.showMessageDialog(null, "Invalid File Format", "Warning", JOptionPane.WARNING_MESSAGE);
    }

    /**
     * Set the time label to given time
     * @param time given time to set label
     */
    void setTimeLabel(String time) {
        timeLabel.setText(time);
    }

    /**
     * Set the date label to given date
     * @param date given date to set label
     */
    void setDateLabel(String date) {
        dateLabel.setText(date);
    }
}
